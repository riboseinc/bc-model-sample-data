#!/usr/bin/env ruby
# frozen_string_literal: true

require 'fileutils'
require 'securerandom'

def get_plan_template
  <<~EOF
    ---
    :category: CATEGORY
    :subcategory: SUBCATEGORY
    :version: VERSION
    :creation_date: CREATION_DATE
    :purposes: To get ready for Notepad on PC
    :invocation_criteria:
    - Temperature goes up to 25 degree Celsius
    - Relative humidity goes up to 90%
    - No cookies left in the cookie jar
    :RTO: 21m
    :RPO: N/A
    :recommended_drill_frequency: At least once every 2 years
    :resources_required:
    - PC
    :responsibles:
    - PC manager
    - PC staff
    :preparation_steps:
    - Plug PC into the mains
    - Stare at it
    :steps:
    - :description: Turn on PC
      :responsible:
      - PC manager
      :time_allowed: 5m
    - :description: Open Notepad
      :responsible:
      - PC staff
      :time_allowed: 5m
    - :description: Click on the X to close Notepad
      :responsible:
      - PC staff
      :time_allowed: 1m
    - :description: Turn off PC
      :responsible:
      - PC manager
      :time_allowed: 10m
  EOF
end

def get_report_template
  <<~EOF
    ---
    :meta:
      :total_step_number: 4
    :doc:
      :plan_name: PLAN_NAME
      :plan_version: VERSION
      :date: DATE
      :time: '0900'
      :authors:
      - Jane
      :participants:
      - Jane
      - Joe
      :followup:
      - PC probably needs upgrading.
      :steps:
      - :drill_type: live
        :description: Turn on PC
        :responsible:
        - Jane
        :time_allowed: 5m
        :start_time: '0900'
        :end_time: '0910'
        :result: failure
        :result_description: PC is turned on, but took a long time.
        :result_evidence:
        - image: https://pastebin/654ew98e
      - :drill_type: live
        :description: Open Notepad
        :responsible:
        - Joe
        :time_allowed: 5m
        :start_time: '0910'
        :end_time: '0915'
        :result: success
        :result_description: Notepad is opened, but took a long time.
        :result_evidence:
        - image: https://pastebin/654ew8es
      - :drill_type: live
        :description: Click on the X to close Notepad
        :responsible:
        - Joe
        :time_allowed: 1m
        :start_time: '0915'
        :end_time: '0916'
        :result: failure
        :result_description: Notepad can't be closed.  There's no response from the computer.
        :result_evidence:
        - image: https://pastebin/64ew98es
      - :drill_type: live
        :description: Turn off PC
        :responsible:
        - Jane
        :time_allowed: 10m
        :start_time: '0916'
        :end_time: '1518'
        :result: failure
        :result_description: PC is turned off, but the auto-update took a long while.
        :result_evidence:
        - image: https://pastebin/654w98es
        - image: https://pastebin/754w98es
  EOF
end

def get_random_date
  @start_time ||= Time.mktime(2018)
  (@start_time + 3600 * 24 * rand(365 * 3)).strftime('%Y-%m-%d')
end

def subjects
  %w[
    PC
    Mac
    computer
    tablet
    smartphone
    console
    fan
  ]
end

def objects
  %w[
    Notepad
    Vim
    Emacs
  ]
end

def excuses
  [
    'auto-update',
    'virus scanner',
    'malware scanner',
    'garbage collection',
    'yum update',
    'git push',
    'git pull',
  ]
end

def categories
  %w[
    general
    cat_a
    cat_b
    cat_5
    cat_5e
  ]
end

def subcategories
  %w[
    a
    b
    c
  ]
end

def get_random_subject
  subjects.sample
end

def get_random_object
  objects.sample
end

def get_random_excuse
  excuses.sample
end

def get_random_category
  categories.sample
end

def get_random_subcategory
  subcategories.sample
end

def get_random_id
  SecureRandom.alphanumeric
end

def get_random_plan_number
  rand(5)
end

Report = Struct.new(:date, :category, :subcategory, :plan_number, :subject, :object, :plan_version) do
  def to_yaml
    get_report_template
      .gsub(/DATE/, date)
      .gsub(/PC/, subject)
      .gsub(/auto-update/, get_random_excuse)
      .gsub(/Notepad/, object)
      .gsub(/VERSION/, plan_version)
      .gsub(/PLAN_NAME/, plan_name)
  end

  def plan_name
    "#{category}/#{subcategory}#{plan_suffix}"
  end

  def plan_suffix
    plan_number == 0 ? '' : "-plan#{plan_number}"
  end

  def filename
    "#{date.gsub('-', '')}#{plan_suffix}.yaml"
  end

  def dir
    File.join('records', year, category, subcategory)
  end

  def full_path
    File.join(dir, filename)
  end

  def year
    date.split('-')[0]
  end
end

Plan = Struct.new(:category, :subcategory, :plan_number, :subject, :object, :version, :creation_date) do
  def to_yaml
    get_plan_template
      .gsub(/SUBCATEGORY/, subcategory)
      .gsub(/CATEGORY/, category)
      .gsub(/PC/, subject)
      .gsub(/Notepad/, object)
      .gsub(/VERSION/, version)
      .gsub(/CREATION_DATE/, creation_date)
  end

  def filename
    "#{subcategory}#{plan_number == 0 ? '' : "-plan#{plan_number}"}-#{version}.yaml"
  end

  def dir
    File.join('plans', category)
  end

  def full_path
    File.join(dir, filename)
  end
end

def generate_random_report
  date = get_random_date
  # year, month, day = date.split('-')

  if rand(100) < 30
    Report.new(
      date,
      get_random_category,
      get_random_subcategory,
      get_random_plan_number,
      get_random_subject,
      get_random_object,
      get_random_id,
    )
  else
    sampled_plan = @generated_plans.sample

    Report.new(
      date,
      sampled_plan.category,
      sampled_plan.subcategory,
      sampled_plan.plan_number,
      sampled_plan.subject,
      sampled_plan.object,
      sampled_plan.version,
    )
  end
end

def write_doc_to_file(doc)
  FileUtils.mkdir_p(doc.dir)
  persist_to_file(doc.to_yaml, doc.full_path)
end

def persist_to_file(yaml, dest)
  File.open(dest, 'w') do |f|
    f.puts(yaml)
  end
end

def derive_plan_from_report(report)
  Plan.new(
    report.category,
    report.subcategory,
    report.plan_number,
    report.subject,
    report.object,
    report.plan_version,
    (Time.mktime(*report.date.split('-')) - 3600 * 24 * rand(30)).strftime('%Y-%m-%d'),
  )
end

def memoize_plan(plan)
  @generated_plans ||= []
  @generated_plans << plan
end

def generate_reports(times = 100)
  times.times do
    report = generate_random_report
    plan = derive_plan_from_report(report)
    memoize_plan(plan)
    write_doc_to_file(plan)
    write_doc_to_file(report)
  end
end

def main
  report_num = ARGV[0].to_i
  report_num = report_num == 0 ? 50 : report_num
  generate_reports(report_num)
  puts "Generated reports: #{report_num}"
end

main if $PROGRAM_NAME == __FILE__

__END__
